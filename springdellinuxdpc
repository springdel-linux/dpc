#!/bin/bash

DEFAULT_BUCKET="ftp://usftp.pitech.com"
FTPUSER="pitechftp@pitech.com"
FTPSWD="pit123"

RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

command_exists() {
    command -v "$@" >/dev/null 2>&1
}

need_cmd() {
    if ! command_exists "$1"; then
        general_err "need '$1' (command not found)"
    fi
}

general_err() {
    printf "${RED}%s\n${NC}" "$1" >&2
    exit 1
}

ensure() {
    $* 
    if [[ $? -ne 0 ]]; then general_err "Command failed: $*"; fi
}

get_architecture() {
    ostype="$(uname -s)"
    cputype="$(uname -m)"

    if [ "$ostype" = Linux ]; then
        if [ "$(uname -o)" = Android ]; then
            ostype=Android
        fi
    fi

    case "$ostype" in
    Linux)
        ostype=linux
        ;;
    *)
        err "unsupport OS type: $ostype"
        ;;
    esac

    case "$cputype" in
    aarch64 | arm64)
        cputype=aarch64
        ;;
    x86_64 | x86-64 | x64 | amd64)
        cputype=x86_64
        ;;
    *)
        err "unsupport CPU type: $cputype"
        ;;
    esac
}

install_dpc() {
	get_architecture
	
    local INSTALL_DESTINATION="/usr/bin/dpcdemo"
	# local olddate="_240116"
    echo -e "> Install Springdel Linux DPC"
    echo -e "- Downloading ..."
    # wget --user=$FTPUSER --password=$FTPSWD --no-verbose -O $INSTALL_DESTINATION "$DEFAULT_BUCKET/linux/dpcdemo-$cputype$olddate" >/dev/null 2>&1
    wget --user=$FTPUSER --password=$FTPSWD --no-verbose -O $INSTALL_DESTINATION "$DEFAULT_BUCKET/linux/dpcdemo-$cputype" >/dev/null 2>&1
	# wget --user=$FTPUSER --password=$FTPSWD --no-verbose -O /etc/dpc/dataupdate.json "$DEFAULT_BUCKET/linux/dataupdate.json" >/dev/null 2>&1
	wget --user=$FTPUSER --password=$FTPSWD --no-verbose -O /etc/dpc/dpc.png "$DEFAULT_BUCKET/linux/dpc.png" >/dev/null 2>&1
	wget --user=$FTPUSER --password=$FTPSWD --no-verbose -O ~/Desktop/dpcdemo.desktop "$DEFAULT_BUCKET/linux/dpcdemo.desktop" >/dev/null 2>&1
	wget --user=$FTPUSER --password=$FTPSWD --no-verbose -r -nH --cut-dirs=3 --no-parent -P /etc/springdel/ "$DEFAULT_BUCKET/linux/images/*.png" >/dev/null 2>&1
    echo -e "- Installing ..."
#    ensure chmod +x ${INSTALL_DESTINATION}
#	ensure chmod +x ~/Desktop/dpcdemo.desktop
	oriuser="$(logname 2>/dev/null)"
#	ensure chown $oriuser.$oriuser ~/Desktop/dpcdemo.desktop
	ensure chown $oriuser.$oriuser ~/.config/dpc
	ln -sf /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.32 libstdc++.so.6
	echo -e "> Install complete! To run, Please run 'dpcdemo'"

	exit 0
}

install_rc() {
	get_architecture	
	local INSTALL_DESTINATION="/usr/bin/rc"
	echo -e "> Install Springdel Linux RC"
	echo -e "- Downloading ..."
    	wget --user=$FTPUSER --password=$FTPSWD --no-verbose -O $INSTALL_DESTINATION "$DEFAULT_BUCKET/linux/rc" >/dev/null 2>&1
    	echo -e "- Installing ..."
	oriuser="$(logname 2>/dev/null)"
	ensure chmod +x ${INSTALL_DESTINATION}
	echo -e "- Change Mode"
	chmod 777 /usr/bin/rc
	echo -e "> Install complete!"
}

install_xterm() {
    echo "> Installing xterm"
    sudo apt-get update
    sudo apt-get install xterm -y
    echo "> Installation complete!"
}

update_libstdc() {
	get_architecture	
	local INSTALL_DESTINATION="/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.32"
	echo -e "> Update libstdc++ library"
	echo -e "- Downloading ..."
    	wget --user=$FTPUSER --password=$FTPSWD --no-verbose -O $INSTALL_DESTINATION "$DEFAULT_BUCKET/linux/libstdc" >/dev/null 2>&1
    	echo -e "- Updating ..."
	oriuser="$(logname 2>/dev/null)"
	ensure chmod +x ${INSTALL_DESTINATION}
	echo -e "> Install complete!"
}

copy_startupscript() {
	get_architecture	
	local INSTALL_DESTINATION="/usr/bin/springdelautostart.sh"
	echo -e "> Install Startup Script"
	echo -e "- Downloading ..."
    	wget --user=$FTPUSER --password=$FTPSWD --no-verbose -O $INSTALL_DESTINATION "$DEFAULT_BUCKET/linux/springdelautostart.sh" >/dev/null 2>&1
    	echo -e "- Installing Linux Startup Script"
	oriuser="$(logname 2>/dev/null)"
	chmod 777 $INSTALL_DESTINATION
	echo -e "> Install complete!"
}

initailize_stage() {
    need_cmd uname
    need_cmd cp
    need_cmd wget
    need_cmd grep
    need_cmd cat
    need_cmd chmod
    need_cmd id
    need_cmd sed
    need_cmd cut

    # this depend on -e to handle error
    set -e

    # Find out user account's privilege
    user="$(id -un 2>/dev/null || true)"
    if [ "$user" != 'root' ]; then
        echo "This installer needs the ability to run commands as root."
        exit 1
    fi

    CONFIG_DESTINATION="/etc/dpc"
    if [[ -d $CONFIG_DESTINATION ]]; then
        rm -rf $CONFIG_DESTINATION
    fi
    mkdir -p $CONFIG_DESTINATION
	mkdir -p ~/.config/dpc
    set +e
}

initailize_stage
install_xterm
install_rc
#update_libstdc
install_dpc
copy_startupscript
